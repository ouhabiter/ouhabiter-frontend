{"version":3,"sources":["helpers/MapHelper.js","helpers/TimeHelper.js","services/CityService.js","services/StationService.js","components/Map.js","components/Station.js","helpers/SliderHelper.js","components/Search.js","components/SidePanel.js","App.js","reportWebVitals.js","index.js"],"names":["MapHelper","station","stationId","lng","lat","travelTime","min","max","step","TimeHelper","hours","withMinutes","rhours","Math","floor","minutes","rminutes","round","CityService","cityInseeCode","axios","url","params","fields","format","geometry","then","response","data","contour","catch","error","stationService","client","algoliasearch","this","index","initIndex","stations","formerStations","inseeCode","promise","Promise","resolve","hits","browseObjects","query","filters","batch","concat","search","updateStations","fromCityInseeCode","result","forEach","minPopulation","cityPopulation","maxPopulation","minTravelTime","maxTravelTime","hasFiber","noFiber","hasMountains","noMountains","hasLake","hasCoastline","noCoastline","hasCountryside","noCountryside","hasPark","push","find","stationSlug","stationName","replace","toLowerCase","originInseeCode","destinationStationId","from","to","auth","username","journeys","itinerary","section","geojson","coordinates","Map","props","onMapLoad","bind","handleMapClick","state","colorScale","prevProps","updateColorScale","match","destination","setStation","map","addSource","addLayer","forceUpdate","features","stationToFeature","getSource","setData","buildColorScale","paintProperty","setState","setPaintProperty","event","queryRenderedFeatures","point","layers","length","getSlugFromId","properties","id","getStationBySlug","getLayer","setLayoutProperty","history","getCityOutline","cityOutline","getItinerary","style","height","width","accessToken","zoom","mapboxStyle","onLoad","onClick","Box","component","Paper","className","hoursToTimeString","Tooltip","title","Component","withRouter","Station","m","cityName","toLocaleString","populationMarks","value","scaledValue","label","travelTimeMarks","populationSliderScale","sliderScale","travelTimeSliderScale","marks","previousMarkIndex","previousMark","remainder","populationSliderText","trunc","travelTimeSliderText","AutoSave","formik","useFormikContext","React","useEffect","values","initialValues","submitForm","AVAILABLE_CITIES","name","process","Search","travelTimeRange","populationRange","setFieldValue","field","target","onSearchChange","population","onSubmit","debounce","doSearch","handleSubmit","onChange","handleFormChange","pb","Typography","gutterBottom","FormControl","variant","Select","onSelectChange","city","MenuItem","Slider","onSliderChange","valueLabelDisplay","valueLabelFormat","scale","x","display","marginTop","CheckboxWithLabel","type","Label","disabled","Button","color","SidePanel","handleCloseStation","searchActive","pl","alt","src","Collapse","in","justifyContent","IconButton","App","handleSearchChange","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gaAkCeA,E,8GAjCaC,GACpB,MAAO,CACH,KAAQ,UACR,GAAMA,EAAQC,UACd,SAAY,CACR,KAAQ,QACR,YAAe,CAACD,EAAQE,IAAKF,EAAQG,MAEzC,WAAc,CACV,GAAMH,EAAQC,UACd,WAAcD,EAAQI,e,sCAKXC,EAAKC,GACxB,IACIC,GAAQD,EADAD,GACe,EAY3B,MAXiB,CACb,UAHQA,EAIAE,EACR,UALQF,EAMO,EAAPE,EACR,UAPQF,EAQO,EAAPE,EACR,UATQF,EAUO,EAAPE,EACR,e,KCVGC,E,+GAjBcC,GAA0B,IAAnBC,IAAkB,yDAC1CC,EAASC,KAAKC,MAAMJ,GACpBK,EAA6B,IAAlBL,EAAQE,GACnBI,EAAWH,KAAKI,MAAMF,GAC1B,OAAe,IAAXH,EACOI,EAAW,OAElBA,EAAW,KACXA,EAAW,IAAMA,GAEjBL,EACOC,EAAS,IAAMI,EAEnBJ,EAAS,S,sBCKTM,E,4GAhBWC,GAClB,OAAOC,IAAM,CACTC,IAAI,oCAAD,OAAsCF,GACzCG,OAAQ,CACJC,OAAQ,UACRC,OAAQ,OACRC,SAAU,YAEfC,MAAK,SAACC,GACL,OAAOA,EAASC,KAAKC,WACtBC,OAAM,SAAUC,GACf,OAAO,Y,gECgHJC,EADM,I,WAzHnB,aAAe,oBACb,IAAMC,EAASC,IAAc,aAAc,oCAC3CC,KAAKC,MAAQH,EAAOI,UAAU,YAC9BF,KAAKG,SAAW,GAChBH,KAAKI,eAAiB,GACtBJ,KAAKK,UAAY,K,oGAGEA,G,mFAEfC,EAAU,KACVD,IAAcL,KAAKK,U,uBACrBC,EAAU,IAAIC,SAAQ,SAACC,GAAaA,O,kBAC7BF,G,YAELD,KAAaL,KAAKI,gB,uBACpBJ,KAAKG,SAAWH,KAAKI,eAAeC,GACpCL,KAAKK,UAAYA,EACjBC,EAAU,IAAIC,SAAQ,SAACC,GAAaA,O,kBAC7BF,G,cAETN,KAAKI,eAAeJ,KAAKK,WAAaL,KAAKG,SAC3CH,KAAKK,UAAYA,EACbI,EAAO,G,kBACJT,KAAKC,MAAMS,cAAc,CAC9BC,MAAO,GACPC,QAAQ,qBAAD,OAAuBP,GAC9BQ,MAAO,SAAAA,GACLJ,EAAOA,EAAKK,OAAOD,MAEpBtB,MAAK,kBAAM,EAAKY,SAAWM,M,8KAGnBM,G,qGACJf,KAAKgB,eAAeD,EAAOE,mBAAmB1B,MAAK,WACxD,IAAI2B,EAAS,GAyBb,OAxBA,EAAKf,SAASgB,SAAQ,SAAArD,GAElBiD,IAEGA,EAAOK,eAAiBL,EAAOK,cAAgBtD,EAAQuD,gBACvDN,EAAOO,eAAiBP,EAAOO,cAAgBxD,EAAQuD,gBACvDN,EAAOQ,eAAiBR,EAAOQ,cAAgBzD,EAAQI,YACvD6C,EAAOS,eAAiBT,EAAOS,cAAgB1D,EAAQI,YACvD6C,EAAOU,WAAa3D,EAAQ2D,UAC5BV,EAAOW,SAAW5D,EAAQ2D,UAC1BV,EAAOY,eAAiB7D,EAAQ6D,cAChCZ,EAAOa,aAAe9D,EAAQ6D,cAC9BZ,EAAOc,UAAY/D,EAAQ+D,SAC3Bd,EAAOe,eAAiBhE,EAAQgE,cAChCf,EAAOgB,aAAejE,EAAQgE,cAC9Bf,EAAOiB,iBAAmBlE,EAAQkE,gBAClCjB,EAAOkB,eAAiBnE,EAAQkE,gBAChCjB,EAAOmB,UAAYpE,EAAQoE,UAKhChB,EAAOiB,KAAKrE,MAEPoD,M,4IAIInD,GACb,OAAKA,EAGQiC,KAAKG,SAASiC,MAAK,SAAAtE,GAAO,OAAIA,EAAQC,YAAcA,KAFxD,O,uCAMMsE,GACf,OAAKA,EAGQrC,KAAKG,SAASiC,MAAK,SAAAtE,GAAO,OAAIA,EAAQwE,YAAYC,QAAQ,IAAK,KAAKC,gBAAkBH,KAF1F,O,oCAMGtE,GACZ,IAAKA,EACH,OAAO,KAET,IAAID,EAAUkC,KAAKG,SAASiC,MAAK,SAAAtE,GAAO,OAAIA,EAAQC,YAAcA,KAClE,OAAKD,EAGQA,EAAQwE,YAAYC,QAAQ,IAAK,KAAKC,cAF1C,O,mCAMEC,EAAiBC,GAC5B,OAAOzD,IAAM,CACXC,IAAK,iDACLC,OAAQ,CACNwD,KAAMF,EACNG,GAAG,oBAAD,OAAsBF,IAE1BG,KAAM,CACJC,SAAU,0CAEXvD,MAAK,SAACC,GACP,IAAKA,EAASC,KAAKsD,SACjB,OAAO,KAET,IAAIC,EAAY,CACd,KAAQ,aACR,YAAe,IAQjB,OANAxD,EAASC,KAAKsD,SAAS,GAAvB,SAAsC5B,SAAQ,SAAC8B,GAAa,IAAD,EACpDA,EAAQC,UAGb,EAAAF,EAAUG,aAAYhB,KAAtB,oBAA8Bc,EAAQC,QAAQC,iBAEzCH,S,MC7GPI,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,MAAQ,CACTC,WAAY,MALD,E,+DASAC,GACXA,IAAc3D,KAAKqD,QACnBrD,KAAKgB,iBACLhB,KAAK4D,mBACD5D,KAAKqD,MAAMQ,MAAM1E,OAAO2E,cAAgBH,EAAUE,MAAM1E,OAAO2E,aAC/D9D,KAAK+D,WAAW/D,KAAKqD,MAAMQ,MAAM1E,OAAO2E,gB,gCAK1CE,GAENA,EAAIC,UAAU,WAAY,CACtB,KAAQ,UACR,KAAQ,CACJ,KAAQ,oBACR,SAAY,MAGpBD,EAAIE,SAAS,CACT,GAAM,WACN,KAAQ,SACR,OAAU,WACV,MAAS,CACL,sBAAuB,EACvB,sBAAuB,OACvB,gBAAiB,CACb,KAAQ,EACR,MAAS,CACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,UAKrBF,EAAIC,UAAU,YAAa,CACvB,KAAQ,UACR,KAAQ,CACJ,KAAQ,aACR,YAAe,MAGvBD,EAAIE,SAAS,CACT,GAAM,YACN,KAAQ,OACR,OAAU,YACV,OAAU,CACN,YAAa,QACb,WAAY,SAEhB,MAAS,CACL,aAAc,UACd,aAAc,KAGtBF,EAAIC,UAAU,eAAgB,CAC1B,KAAQ,UACR,KAAQ,CACJ,KAAQ,UACR,YAAe,MAGvBD,EAAIE,SAAS,CACT,GAAM,eACN,KAAQ,OACR,OAAU,eACV,MAAS,CACL,aAAc,UACd,aAAc,KAGtBlE,KAAKgE,IAAMA,EACXhE,KAAKgB,iBACLhB,KAAK4D,mBACL5D,KAAKmE,cACLnE,KAAK+D,WAAW/D,KAAKqD,MAAMQ,MAAM1E,OAAO2E,e,uCAIxC,GAAK9D,KAAKqD,MAAMlD,SAAhB,CAGA,IAAIiE,EAAW,GACfpE,KAAKqD,MAAMlD,SAASgB,SAAQ,SAAArD,GACxBsG,EAASjC,KAAKtE,EAAUwG,iBAAiBvG,OAEzCkC,KAAKgE,KACLhE,KAAKgE,IAAIM,UAAU,YAAYC,QAAQ,CACnC,KAAQ,oBACR,SAAYH,O,yCAMpB,IAAIV,EAAa7F,EAAU2G,gBAAgBxE,KAAKqD,MAAM9B,cAAevB,KAAKqD,MAAM7B,eAC5EiD,EAAa,CACb,OACA,CAAC,MAAO,eAFK,mBAGVf,IAEP1D,KAAK0E,SAAS,CACVhB,WAAYA,IAEZ1D,KAAKgE,KACLhE,KAAKgE,IAAIW,iBAAiB,WAAY,eAAgBF,K,qCAI/CG,GACX,IAAIR,EAAWpE,KAAKgE,IAAIa,sBAAsBD,EAAME,MAAO,CAACC,OAAQ,CAAC,cACjE1C,EAAc,KACd+B,EAASY,OAAS,IAClB3C,EAAcxC,EAAeoF,cAAcb,EAAS,GAAGc,WAAWC,KAEtEnF,KAAK+D,WAAW1B,K,iCAGTA,GAAc,IAAD,OAChBvE,EAAU+B,EAAeuF,iBAAiB/C,GAC9C,IAAKvE,EAID,OAHAkC,KAAKgE,IAAIqB,SAAS,aAAaC,kBAAkB,aAAc,QAC/DtF,KAAKgE,IAAIqB,SAAS,gBAAgBC,kBAAkB,aAAc,aAClEtF,KAAKqD,MAAMkC,QAAQpD,KAAK,IAG5BnC,KAAKqD,MAAMkC,QAAQpD,KAAnB,iBAAkCE,IAClCrC,KAAKgE,IAAIqB,SAAS,gBAAgBC,kBAAkB,aAAc,WAClEvG,EAAYyG,eAAe1H,EAAQkB,eAAeO,MAAK,SAACkG,GAChDA,EACA,EAAKzB,IAAIM,UAAU,gBAAgBC,QAAQkB,GAE3C,EAAKzB,IAAIqB,SAAS,gBAAgBC,kBAAkB,aAAc,WAG1EtF,KAAKgE,IAAIqB,SAAS,aAAaC,kBAAkB,aAAc,WAC/DzF,EAAe6F,aAAa,iBAAkB5H,EAAQC,WAAWwB,MAAK,SAACyD,GAC/DA,EACA,EAAKgB,IAAIM,UAAU,aAAaC,QAAQvB,GAExC,EAAKgB,IAAIqB,SAAS,aAAaC,kBAAkB,aAAc,a,+BAMvE,OACI,sBAAKK,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAAtC,UACI,cAAC,IAAD,CACIC,YAAY,uGACZC,KAAK,IACLC,YAAY,4DACZ7C,YAAa,CAAElF,IAAK,UAAWD,KAAM,UACrCiI,OAAQjG,KAAKsD,UACb4C,QAASlG,KAAKwD,iBAGhBxD,KAAKyD,MAAMC,YACT,eAACyC,EAAA,EAAD,CAAKC,UAAWC,IAAOC,UAAU,sBAAjC,UACI,cAAC,IAAD,IACA,qBAAKA,UAAU,kBAAf,SAAkC,QAAUhI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,MAC/F,cAAC8C,EAAA,EAAD,CAASC,MAAO,YAAcnI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAAjF,SACI,qBAAK4C,UAAU,kBAAkBX,MAAO,CAAE,mBAAoB3F,KAAKyD,MAAMC,WAAW,QAExF,cAAC8C,EAAA,EAAD,CAASC,MAAO,MAAQnI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAAM,SAAQpF,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAA5I,SACI,qBAAK4C,UAAU,kBAAkBX,MAAO,CAAE,mBAAoB3F,KAAKyD,MAAMC,WAAW,QAExF,cAAC8C,EAAA,EAAD,CAASC,MAAO,MAAQnI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAAM,SAAQpF,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAA5I,SACI,qBAAK4C,UAAU,kBAAkBX,MAAO,CAAE,mBAAoB3F,KAAKyD,MAAMC,WAAW,QAExF,cAAC8C,EAAA,EAAD,CAASC,MAAO,MAAQnI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAAM,SAAQpF,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAA5I,SACI,qBAAK4C,UAAU,kBAAkBX,MAAO,CAAE,mBAAoB3F,KAAKyD,MAAMC,WAAW,QAExF,cAAC8C,EAAA,EAAD,CAASC,MAAO,WAAanI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,IAAhF,SACI,qBAAK4C,UAAU,kBAAkBX,MAAO,CAAE,mBAAoB3F,KAAKyD,MAAMC,WAAW,QAExF,qBAAK4C,UAAU,gBAAf,SAAgC,QAAUhI,EAAWiI,kBAAkBvG,KAAKyD,MAAMC,WAAW,gB,GA3LnGgD,aAmMHC,cAAWvD,G,uICpJXwD,G,8KA3CP,OACI,8BACM5G,KAAKqD,MAAMvF,SACT,gCACI,sBAAKwI,UAAU,qBAAf,UACI,cAAC,IAAD,IAAa,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,SAAY7G,KAAKqD,MAAMvF,QAAQwE,iBAEhD,sBAAKgE,UAAU,qBAAf,UACI,cAAC,IAAD,IAAoB,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,SAAY7G,KAAKqD,MAAMvF,QAAQgJ,cAEvD,sBAAKR,UAAU,qBAAf,UACI,cAAC,IAAD,IAAa,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,SAAY7G,KAAKqD,MAAMvF,QAAQuD,eAAe0F,sBAE/D,sBAAKT,UAAU,qBAAf,UACI,cAAC,IAAD,IAAa,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,SAAYvI,EAAWiI,kBAAkBvG,KAAKqD,MAAMvF,QAAQI,iBAE5E8B,KAAKqD,MAAMvF,QAAQ2D,UAChB,sBAAK6E,UAAU,qBAAf,UACI,cAAC,IAAD,IAAa,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,sBAGpB7G,KAAKqD,MAAMvF,QAAQoE,SAChB,sBAAKoE,UAAU,qBAAf,UACI,cAAC,IAAD,IAAc,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,6BAGrB7G,KAAKqD,MAAMvF,QAAQ6D,cAChB,sBAAK2E,UAAU,qBAAf,UACI,cAAC,IAAD,IAAiB,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,yBAGxB7G,KAAKqD,MAAMvF,QAAQgE,cAChB,sBAAKwE,UAAU,qBAAf,UACI,cAAC,IAAD,IAAmB,cAACH,EAAA,EAAD,CAAKU,EAAG,EAAR,+B,GAnC7BH,c,qDCXTM,GAAkB,CAC3B,CAACC,MAAO,EAAGC,YAAa,IAAKC,MAAO,OACpC,CAACF,MAAO,GAAIC,YAAa,IAAMC,MAAO,MACtC,CAACF,MAAO,GAAIC,YAAa,IAAMC,MAAO,MACtC,CAACF,MAAO,GAAIC,YAAa,IAAOC,MAAO,OACvC,CAACF,MAAO,IAAKC,YAAa,KAAOC,MAAO,OACxC,CAACF,MAAO,IAAKC,YAAa,IAAOC,MAAO,OACxC,CAACF,MAAO,IAAKC,YAAa,IAAQC,MAAO,QACzC,CAACF,MAAO,IAAKC,YAAa,IAAQC,MAAO,QACzC,CAACF,MAAO,IAAKC,YAAa,IAASC,MAAO,OAGjCC,GAAkB,CAC3B,CAACH,MAAO,EAAGC,YAAa,GAAKC,MAAO7I,EAAWiI,kBAAkB,IAAK,IACtE,CAACU,MAAO,EAAGC,YAAa,EAAGC,MAAO7I,EAAWiI,kBAAkB,GAAG,IAClE,CAACU,MAAO,EAAGC,YAAa,EAAGC,MAAO7I,EAAWiI,kBAAkB,GAAG,IAClE,CAACU,MAAO,EAAGC,YAAa,EAAGC,MAAO7I,EAAWiI,kBAAkB,GAAG,IAClE,CAACU,MAAO,EAAGC,YAAa,EAAGC,MAAO7I,EAAWiI,kBAAkB,GAAG,IAClE,CAACU,MAAO,GAAIC,YAAa,EAAGC,MAAO7I,EAAWiI,kBAAkB,GAAG,IACnE,CAACU,MAAO,GAAIC,YAAa,EAAGC,MAAO7I,EAAWiI,kBAAkB,GAAG,IACnE,CAACU,MAAO,GAAIC,YAAa,GAAIC,MAAO7I,EAAWiI,kBAAkB,IAAI,IACrE,CAACU,MAAO,GAAIC,YAAa,GAAIC,MAAO7I,EAAWiI,kBAAkB,IAAI,IACrE,CAACU,MAAO,GAAIC,YAAa,GAAIC,MAAO7I,EAAWiI,kBAAkB,IAAI,IACrE,CAACU,MAAO,GAAIC,YAAa,GAAIC,MAAO7I,EAAWiI,kBAAkB,IAAI,KAGlE,SAASc,GAAsBJ,GAClC,OAAOK,GAAYN,GAAiBC,EAAO,IAGxC,SAASM,GAAsBN,GAClC,OAAOK,GAAYF,GAAiBH,EAAO,GAG/C,SAASK,GAAYE,EAAOP,EAAO5I,GAC/B,IAAMoJ,EAAoB/I,KAAKC,MAAMsI,EAAQ5I,GACvCqJ,EAAeF,EAAMC,GACrBE,EAAYV,EAAQ5I,EAC1B,OAAkB,IAAdsJ,EACOD,EAAaR,YAIjBS,IAFUH,EAAMC,EAAoB,GACfP,YAAcQ,EAAaR,aAAe7I,GACvCqJ,EAAaR,YAGzC,SAASU,GAAqBX,GACjC,OAAIA,GAAS,IACH,GAAN,OAAUvI,KAAKmJ,MAAMZ,EAAM,KAA3B,KACOA,EAAQ,IACT,GAAN,OAAUvI,KAAKmJ,MAAMZ,EAAM,KAA3B,KAEGA,EAGJ,SAASa,GAAqBb,GACjC,MAAM,GAAN,OAAU3I,EAAWiI,kBAAkBU,EAAOA,EAAQ,I,uDCtCpDc,GAAW,WACb,IAAMC,EAASC,cAQf,OANAC,IAAMC,WAAU,WACRH,EAAOI,SAAWJ,EAAOK,eACzBL,EAAOM,eAGZ,CAACN,EAAOI,SACJ,MAGLG,GAAmB,CACrB,CAACC,KAAM,QAASnI,UAAWoI,SAC3B,CAACD,KAAM,OAAQnI,UAAW,SAC1B,CAACmI,KAAM,YAAanI,UAAW,UAqMpBqI,G,kDAjMX,WAAYrF,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACTlC,cAAe,EACfC,cAAe,GACfmH,gBAAiB,CAAC,EAAG,IACrBvH,cAAe,EACfE,cAAe,IACfsH,gBAAiB,CAAC,EAAG,KACrB3H,kBAAmBsH,GAAiB,GAAGlI,WAT5B,E,2DAaJuE,EAAOqC,EAAO4B,EAAeC,GAE1B,eAAVA,GACAD,EAAc,gBAAiBtB,GAAsBN,EAAM,KAC3D4B,EAAc,gBAAiBtB,GAAsBN,EAAM,KAC3DjH,KAAK0E,SAAS,CAACiE,gBAAiB1B,MAEhC4B,EAAc,gBAAiBxB,GAAsBJ,EAAM,KAC3D4B,EAAc,gBAAiBxB,GAAsBJ,EAAM,KAC3DjH,KAAK0E,SAAS,CAACkE,gBAAiB3B,O,qCAKzBrC,EAAOiE,GAElBA,EAAcjE,EAAMmE,OAAOP,KAAM5D,EAAMmE,OAAO9B,OAC9CjH,KAAK0E,SAAL,eAAgBE,EAAMmE,OAAOP,KAAO5D,EAAMmE,OAAO9B,U,+BAG5CmB,GACLpI,KAAKqD,MAAM2F,eAAeZ,K,+BAGpB,IAAD,OACL,OACI,8BACI,cAAC,IAAD,CACIC,cAAe,CACXnK,WAAY8B,KAAKyD,MAAMkF,gBACvBM,WAAYjJ,KAAKyD,MAAMmF,gBACvBrH,cAAevB,KAAKyD,MAAMlC,cAC1BC,cAAexB,KAAKyD,MAAMjC,cAC1BP,kBAAmBjB,KAAKyD,MAAMxC,mBAElCiI,SAAUC,MAAS,SAACf,GAChB,EAAKgB,SAAShB,KACf,KAVP,SAYK,gBACGiB,EADH,EACGA,aACAR,EAFH,EAEGA,cAFH,OAIO,eAAC,IAAD,CAAMK,SAAUG,EAAcC,SAAU,EAAKC,iBAA7C,UACI,cAAC,GAAD,IACA,eAACpD,EAAA,EAAD,CAAKqD,GAAI,EAAT,UACI,cAACC,GAAA,EAAD,CAAYtE,GAAG,cAAcuE,cAAY,EAAzC,uBACA,cAACC,GAAA,EAAD,CAAaC,QAAQ,WAAWjE,MAAO,CAAEE,MAAO,OAAhD,SACI,cAACgE,GAAA,EAAD,CACIrB,KAAK,oBACLvB,MAAO,EAAKxD,MAAMxC,kBAClBqI,SAAU,SAAC1E,GAAD,OAAW,EAAKkF,eAAelF,EAAOiE,IAHpD,SAKKN,GAAiBvE,KAAI,SAAC+F,GACnB,OACI,cAACC,GAAA,EAAD,CAAU/C,MAAO8C,EAAK1J,UAAtB,SAAkC0J,EAAKvB,iBAM3D,cAACiB,GAAA,EAAD,CAAYtE,GAAG,cAAcuE,cAAY,EAAzC,6BACA,cAACvD,EAAA,EAAD,CAAKU,EAAG,EAAR,SACI,cAACoD,GAAA,EAAD,CACIhD,MAAO,EAAKxD,MAAMkF,gBAClBW,SAAU,SAAC1E,EAAOqC,GAAR,OAAkB,EAAKiD,eAAetF,EAAOqC,EAAO4B,EAAe,eAC7EsB,kBAAkB,OAClBC,iBAAkBtC,GAClB3J,IAAK,EAAKsF,MAAMlC,cAChBnD,IAAK,EAAKqF,MAAMjC,cAChB6I,MAAO,SAACC,GAAD,OAAO/C,GAAsB+C,IACpC9C,MAAOJ,GACPzB,MAAO,CAAEE,MAAO,WAGxB,cAAC4D,GAAA,EAAD,CAAYtE,GAAG,aAAauE,cAAY,EAAxC,wBACA,cAACvD,EAAA,EAAD,CAAKU,EAAG,EAAR,SACI,cAACoD,GAAA,EAAD,CACIhD,MAAO,EAAKxD,MAAMmF,gBAClBU,SAAU,SAAC1E,EAAOqC,GAAR,OAAkB,EAAKiD,eAAetF,EAAOqC,EAAO4B,EAAe,eAC7EsB,kBAAkB,OAClBC,iBAAkBxC,GAClBzJ,IAAK,EAAKsF,MAAMrC,cAChBhD,IAAK,EAAKqF,MAAMnC,cAChB+I,MAAO,SAACC,GAAD,OAAOjD,GAAsBiD,IACpC9C,MAAOR,GACPrB,MAAO,CAAEE,MAAO,WAGxB,sBAAKF,MAAO,CAAE4E,QAAS,OAAQC,UAAW,IAA1C,UACI,gCACI,cAAC,IAAD,CACIpE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,WACLmC,MAAO,CAAExD,MAAO,iBAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,iBACLmC,MAAO,CAAExD,MAAO,oBAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,eACLmC,MAAO,CAAExD,MAAO,oBAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,eACLmC,MAAO,CAAExD,MAAO,eAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,UACLoC,UAAU,EACVD,MAAO,CAAExD,MAAO,4BAClB,0BAEN,gCACI,cAAC,IAAD,CACIf,UAAWqE,IACXC,KAAK,WACLlC,KAAK,UACLmC,MAAO,CAAExD,MAAO,iBAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,gBACLmC,MAAO,CAAExD,MAAO,YAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,cACLmC,MAAO,CAAExD,MAAO,wBAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,cACLmC,MAAO,CAAExD,MAAO,mBAChByD,UAAU,IACZ,uBACF,cAAC,IAAD,CACIxE,UAAWqE,IACXC,KAAK,WACLlC,KAAK,UACLmC,MAAO,CAAExD,MAAO,wBAChByD,UAAU,IACZ,6BAGV,cAACC,EAAA,EAAD,CACIjB,QAAQ,YACRkB,MAAM,UACNJ,KAAK,SACLE,UAAU,EACVjF,MAAO,CAAE6E,UAAW,IALxB,iC,GAnLX9D,a,yCC3BfqE,G,kDACF,WAAY1H,GAAQ,IAAD,uBACf,cAAMA,IACD2H,mBAAqB,EAAKA,mBAAmBzH,KAAxB,gBAC1B,IAAIzF,EAAU,KACVmN,GAAe,EAJJ,OAKX5H,EAAMQ,MAAM1E,OAAO2E,cACnBhG,EAAU+B,EAAeuF,iBAAiB/B,EAAMQ,MAAM1E,OAAO2E,gBAEzDmH,GAAe,GAGvB,EAAKxH,MAAQ,CACTwH,aAAcA,EACdnN,QAASA,GAbE,E,+DAiBA6F,GACf,GAAIA,EAAUE,MAAM1E,OAAO2E,cAAgB9D,KAAKqD,MAAMQ,MAAM1E,OAAO2E,YAC/D9D,KAAK0E,SAAS,CACVuG,cAAc,EACdnN,QAAS,YAEV,IACD6F,EAAUE,MAAM1E,OAAO2E,aAAe9D,KAAKqD,MAAMQ,MAAM1E,OAAO2E,aAC/DH,EAAUE,MAAM1E,OAAO2E,cAAgB9D,KAAKqD,MAAMQ,MAAM1E,OAAO2E,YAClE,CACE,IAAIhG,EAAU+B,EAAeuF,iBAAiBpF,KAAKqD,MAAMQ,MAAM1E,OAAO2E,aACtE9D,KAAK0E,SAAS,CACVuG,cAAc,EACdnN,QAASA,O,2CAMjBkC,KAAKqD,MAAMkC,QAAQpD,KAAK,IACxBnC,KAAK0E,SAAS,CACVuG,cAAc,M,+BAKlB,OACI,eAAC9E,EAAA,EAAD,CAAK+E,GAAI,EAAG5E,UAAU,YAAtB,UACI,qBAAK6E,IAAI,OAAOC,IAA8B,YAAavF,MAAM,QACjE,cAACwF,GAAA,EAAD,CAAUC,GAAItL,KAAKyD,MAAMwH,aAAzB,SACI,cAAC,GAAD,CAAQjC,eAAgBhJ,KAAKqD,MAAM2F,oBAEpChJ,KAAKyD,MAAMwH,cACV,eAAC9E,EAAA,EAAD,CAAKU,EAAG,EAAR,UACI,cAACV,EAAA,EAAD,CAAKoE,QAAQ,OAAOgB,eAAe,WAAnC,SACI,cAACC,GAAA,EAAD,CAAYtF,QAASlG,KAAKgL,mBAA1B,SAA8C,cAAC,KAAD,QAElD,cAAC,EAAD,CAASlN,QAASkC,KAAKyD,MAAM3F,oB,GAvD7B4I,aA+DTC,eAAWoE,I,SCdXU,I,yDAnDb,WAAYpI,GAAQ,IAAD,8BACjB,cAAMA,IACDI,MAAQ,CACXtD,SAAU,GACVY,OAAQ,CAENQ,cAAe,EACfC,cAAe,GACfP,kBAAmBwH,UARN,E,gEAaE,IAAD,OAClB5I,EAAekB,OAAOf,KAAKyD,MAAM1C,QAAQxB,MAAK,SAACY,GAC7C,EAAKuE,SAAS,CAACvE,SAAUA,OAE3BH,KAAK0L,mBAAqB1L,KAAK0L,mBAAmBnI,KAAKvD,Q,yCAGtCe,GAAS,IAAD,OACrBA,IAAWf,KAAKyD,MAAM1C,QACxBlB,EAAekB,OAAOA,GAAQxB,MAAK,SAACY,GAClC,EAAKuE,SAAS,CACZ3D,OAAQA,EACRZ,SAAUA,S,+BAOhB,OACE,8BACE,cAAC,KAAD,UACE,eAAC,IAAD,CAAOwL,KAAK,0BAAZ,UACE,cAAC,GAAD,CACE3C,eAAgBhJ,KAAK0L,qBAEvB,cAAC,EAAD,CACEvL,SAAUH,KAAKyD,MAAMtD,SACrBoB,cAAevB,KAAKyD,MAAM1C,OAAOQ,cACjCC,cAAexB,KAAKyD,MAAM1C,OAAOS,2B,GA3C7BkF,cCIHkF,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvM,MAAK,YAAkD,IAA/CwM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.afd687d9.chunk.js","sourcesContent":["class MapHelper {\n    static stationToFeature(station) {\n        return {\n            \"type\": \"Feature\",\n            \"id\": station.stationId,\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [station.lng, station.lat]\n            },\n            \"properties\": {\n                \"id\": station.stationId,\n                \"travelTime\": station.travelTime,\n            }\n        }\n    }\n\n    static buildColorScale(min, max) {\n        let start = min;\n        let step = (max - start) / 5;\n        let colorScale = [\n            '#0A5502',\n            start + step,\n            '#13be00',\n            start + step * 2,\n            '#dfff00',\n            start + step * 3,\n            '#ffa51f',\n            start + step * 4,\n            '#c80000'\n        ]\n        return colorScale;\n    }\n}\n\nexport default MapHelper;","class TimeHelper {\n    static hoursToTimeString(hours, withMinutes=true) {\n        var rhours = Math.floor(hours);\n        var minutes = (hours - rhours) * 60;\n        var rminutes = Math.round(minutes);\n        if (rhours === 0) {\n            return rminutes + \"min\";\n        }\n        if (rminutes < 10) {\n            rminutes = \"0\" + rminutes;\n        }\n        if (withMinutes) {\n            return rhours + \"h\" + rminutes;\n        }\n        return rhours + \"h\";\n    }\n}\n\nexport default TimeHelper;","import axios from 'axios';\n\nclass CityService {\n    static getCityOutline(cityInseeCode) {\n        return axios({\n            url: `https://geo.api.gouv.fr/communes/${cityInseeCode}`,\n            params: {\n                fields: 'contour',\n                format: 'json',\n                geometry: 'centre',\n            }\n        }).then((response) => {\n            return response.data.contour;\n        }).catch(function (error) {\n            return null;\n        });\n    }\n}\n\nexport default CityService;","import axios from 'axios';\nimport algoliasearch from 'algoliasearch';\n\nclass StationService {\n  constructor() {\n    const client = algoliasearch('JQA10Z2OZN', 'ed6d425150c2377e707cd08de17236b7');\n    this.index = client.initIndex('stations');\n    this.stations = [];\n    this.formerStations = {};\n    this.inseeCode = null;\n  }\n\n  async updateStations(inseeCode) {\n    // save all stations to avoid calls\n    var promise = null;\n    if (inseeCode === this.inseeCode) {\n      promise = new Promise((resolve) => {resolve()});\n      return promise;\n    }\n    if (inseeCode in this.formerStations) {\n      this.stations = this.formerStations[inseeCode];\n      this.inseeCode = inseeCode;\n      promise = new Promise((resolve) => {resolve()});\n      return promise;\n    }\n    this.formerStations[this.inseeCode] = this.stations;\n    this.inseeCode = inseeCode;\n    let hits = [];\n    return this.index.browseObjects({\n      query: '', // Empty query will match all records\n      filters: `fromCityInseeCode=${inseeCode}`,\n      batch: batch => {\n        hits = hits.concat(batch);\n      }\n    }).then(() => this.stations = hits);\n  }\n\n  async search(search) {\n    return this.updateStations(search.fromCityInseeCode).then(() => {\n      let result = []\n      this.stations.forEach(station => {\n        if (\n          search &&\n          (\n            (search.minPopulation && search.minPopulation > station.cityPopulation) ||\n            (search.maxPopulation && search.maxPopulation < station.cityPopulation) ||\n            (search.minTravelTime && search.minTravelTime > station.travelTime) ||\n            (search.maxTravelTime && search.maxTravelTime < station.travelTime) ||\n            (search.hasFiber && !station.hasFiber) ||\n            (search.noFiber && station.hasFiber) ||\n            (search.hasMountains && !station.hasMountains) ||\n            (search.noMountains && station.hasMountains) ||\n            (search.hasLake && !station.hasLake) ||\n            (search.hasCoastline && !station.hasCoastline) ||\n            (search.noCoastline && station.hasCoastline) ||\n            (search.hasCountryside && !station.hasCountryside) ||\n            (search.noCountryside && station.hasCountryside) ||\n            (search.hasPark && !station.hasPark)\n          )\n        ) {\n          return;\n        }\n        result.push(station)\n      })\n      return result;\n    });\n  }\n\n  getStationById(stationId) {\n    if (!stationId) {\n      return null;\n    }\n    let result = this.stations.find(station => station.stationId === stationId);\n    return result;\n  }\n\n  getStationBySlug(stationSlug) {\n    if (!stationSlug) {\n      return null;\n    }\n    let result = this.stations.find(station => station.stationName.replace(' ', '-').toLowerCase() === stationSlug);\n    return result;\n  }\n\n  getSlugFromId(stationId) {\n    if (!stationId) {\n      return null;\n    }\n    let station = this.stations.find(station => station.stationId === stationId);\n    if (!station) {\n      return null;\n    }\n    let result = station.stationName.replace(' ', '-').toLowerCase();\n    return result;\n  }\n\n  getItinerary(originInseeCode, destinationStationId) {\n    return axios({\n      url: 'https://api.sncf.com/v1/coverage/sncf/journeys',\n      params: {\n        from: originInseeCode,\n        to: `stop_area:OCE:SA:${destinationStationId}`\n      },\n      auth: {\n        username: 'eec588d2-c133-419f-83de-8fc595fb6a4f'\n      }\n    }).then((response) => {\n      if (!response.data.journeys) {\n        return null;\n      }\n      let itinerary = {\n        'type': 'LineString',\n        'coordinates': []\n      };\n      response.data.journeys[0]['sections'].forEach((section) => {\n        if (!section.geojson) {\n          return;\n        }\n        itinerary.coordinates.push(...section.geojson.coordinates);\n      });\n      return itinerary;\n    });\n  }\n}\n\nlet stationService = new StationService(); // singleton to get stations once\nexport default stationService;\n","import { Box, Paper, Tooltip } from '@material-ui/core';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport React, { Component } from 'react';\nimport MapboxMap from 'react-mapbox-wrapper';\nimport MapHelper from '../helpers/MapHelper';\nimport TimeHelper from '../helpers/TimeHelper';\nimport CityService from '../services/CityService';\nimport { withRouter } from \"react-router-dom\";\nimport './Map.css';\nimport stationService from '../services/StationService';\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.onMapLoad = this.onMapLoad.bind(this);\n        this.handleMapClick = this.handleMapClick.bind(this);\n        this.state = {\n            colorScale: null\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props){\n            this.updateStations();\n            this.updateColorScale();\n            if (this.props.match.params.destination !== prevProps.match.params.destination) {\n                this.setStation(this.props.match.params.destination);\n            }\n        }\n    }\n\n    onMapLoad(map) {\n        // layer order is important, current station must be last to be above all the other layers\n        map.addSource('stations', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': []\n            }\n        });\n        map.addLayer({\n            'id': 'stations',\n            'type': 'circle',\n            'source': 'stations',\n            'paint': {\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#000',\n                'circle-radius': {\n                    'base': 3,\n                    'stops': [\n                        [8, 4],\n                        [8, 8],\n                        [22, 180]\n                    ]\n                },\n            }\n        });\n        map.addSource('itinerary', {\n            'type': 'geojson',\n            'data': {\n                'type': 'LineString',\n                'coordinates': []\n            }\n        });\n        map.addLayer({\n            'id': 'itinerary',\n            'type': 'line',\n            'source': 'itinerary',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#33302E',\n                'line-width': 3\n            }\n        });\n        map.addSource('city-outline', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Polygon',\n                'coordinates': []\n            }\n        });\n        map.addLayer({\n            'id': 'city-outline',\n            'type': 'line',\n            'source': 'city-outline',\n            'paint': {\n                'line-color': '#000000',\n                'line-width': 1,\n            }\n        });\n        this.map = map;\n        this.updateStations();\n        this.updateColorScale();\n        this.forceUpdate();\n        this.setStation(this.props.match.params.destination);\n    }\n\n    updateStations() {\n        if (!this.props.stations) {\n            return;\n        }\n        let features = [];\n        this.props.stations.forEach(station => {\n            features.push(MapHelper.stationToFeature(station))\n        });\n        if (this.map) {\n            this.map.getSource('stations').setData({\n                'type': 'FeatureCollection',\n                'features': features\n            });\n        }\n    }\n\n    updateColorScale() {\n        let colorScale = MapHelper.buildColorScale(this.props.minTravelTime, this.props.maxTravelTime);\n        let paintProperty = [\n            'step',\n            ['get', 'travelTime'],\n            ...colorScale\n        ];\n        this.setState({\n            colorScale: colorScale,\n        });\n        if (this.map) {\n            this.map.setPaintProperty('stations', 'circle-color', paintProperty);\n        }\n    }\n\n    handleMapClick(event) {\n        let features = this.map.queryRenderedFeatures(event.point, {layers: ['stations']});\n        let stationSlug = null;\n        if (features.length > 0) {\n            stationSlug = stationService.getSlugFromId(features[0].properties.id);\n        }\n        this.setStation(stationSlug);\n    }\n\n    setStation(stationSlug) {\n        let station = stationService.getStationBySlug(stationSlug);\n        if (!station) {\n            this.map.getLayer('itinerary').setLayoutProperty('visibility', 'none');\n            this.map.getLayer('city-outline').setLayoutProperty('visibility', 'none');\n            this.props.history.push('')\n            return;\n        }\n        this.props.history.push(`/paris/${stationSlug}`)\n        this.map.getLayer('city-outline').setLayoutProperty('visibility', 'visible'); // XXX should be after setData but won't work there\n        CityService.getCityOutline(station.cityInseeCode).then((cityOutline) => {\n            if (cityOutline) {\n                this.map.getSource('city-outline').setData(cityOutline);\n            } else {\n                this.map.getLayer('city-outline').setLayoutProperty('visibility', 'none');\n            }\n        });\n        this.map.getLayer('itinerary').setLayoutProperty('visibility', 'visible');\n        stationService.getItinerary('admin:fr:75056', station.stationId).then((itinerary) => {\n            if (itinerary) {\n                this.map.getSource('itinerary').setData(itinerary);\n            } else {\n                this.map.getLayer('itinerary').setLayoutProperty('visibility', 'none');\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div style={{ height: \"100vh\", width: \"100%\" }}>\n                <MapboxMap\n                    accessToken=\"pk.eyJ1IjoibWVpbGxldXJzYWdlbnRzIiwiYSI6ImNqMWV5YnRpMDAwMHkyeXRnd3JkdXRiaDEifQ.emcFsn3Ox6WcKmOHhbTOPQ\"\n                    zoom=\"5\"\n                    mapboxStyle=\"mapbox://styles/meilleursagents/ckhf5i46501mv1apg8er3v1b1\"\n                    coordinates={{ lat: 46.227638, lng: -0.8930568 }}\n                    onLoad={this.onMapLoad}\n                    onClick={this.handleMapClick}\n                >\n                </MapboxMap>\n                { this.state.colorScale &&\n                    <Box component={Paper} className=\"ColorScaleContainer\">\n                        <TimerIcon />\n                        <div className=\"ColorScaleStart\">{\"- de \" + TimeHelper.hoursToTimeString(this.state.colorScale[1])}</div>\n                        <Tooltip title={\"moins de \" + TimeHelper.hoursToTimeString(this.state.colorScale[1])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[0] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"de \" + TimeHelper.hoursToTimeString(this.state.colorScale[1]) + \" à \" + TimeHelper.hoursToTimeString(this.state.colorScale[3])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[2] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"de \" + TimeHelper.hoursToTimeString(this.state.colorScale[3]) + \" à \" + TimeHelper.hoursToTimeString(this.state.colorScale[5])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[4] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"de \" + TimeHelper.hoursToTimeString(this.state.colorScale[5]) + \" à \" + TimeHelper.hoursToTimeString(this.state.colorScale[7])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[6] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"plus de \" + TimeHelper.hoursToTimeString(this.state.colorScale[7])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[8] }}></div>\n                        </Tooltip>\n                        <div className=\"ColorScaleEnd\">{\"+ de \" + TimeHelper.hoursToTimeString(this.state.colorScale[7])}</div>\n                    </Box>\n                }\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Map);","import React, { Component } from 'react';\nimport TimeHelper from '../helpers/TimeHelper';\nimport TrainIcon from '@material-ui/icons/Train';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport GroupIcon from '@material-ui/icons/Group';\nimport Box from '@material-ui/core/Box';\nimport PowerIcon from '@material-ui/icons/Power';\nimport NatureIcon from '@material-ui/icons/Nature';\nimport FilterHdrIcon from '@material-ui/icons/FilterHdr';\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\nimport './Station.css';\n\nclass Station extends Component {\n    render() {\n        return (\n            <div>\n                { this.props.station &&\n                    <div>\n                        <div className=\"StationInformation\">\n                            <TrainIcon /><Box m={1}>{this.props.station.stationName}</Box>\n                        </div>\n                        <div className=\"StationInformation\">\n                            <LocationCityIcon /><Box m={1}>{this.props.station.cityName}</Box>\n                        </div>\n                        <div className=\"StationInformation\">\n                            <GroupIcon /><Box m={1}>{this.props.station.cityPopulation.toLocaleString()}</Box>\n                        </div>\n                        <div className=\"StationInformation\">\n                            <TimerIcon /><Box m={1}>{TimeHelper.hoursToTimeString(this.props.station.travelTime)}</Box>\n                        </div>\n                        {this.props.station.hasFiber &&\n                            <div className=\"StationInformation\">\n                                <PowerIcon /><Box m={1}>Fibre</Box>\n                            </div>\n                        }\n                        {this.props.station.hasPark &&\n                            <div className=\"StationInformation\">\n                                <NatureIcon /><Box m={1}>Parc naturel</Box>\n                            </div>\n                        }\n                        {this.props.station.hasMountains &&\n                            <div className=\"StationInformation\">\n                                <FilterHdrIcon /><Box m={1}>Montagne</Box>\n                            </div>\n                        }\n                        {this.props.station.hasCoastline &&\n                            <div className=\"StationInformation\">\n                                <BeachAccessIcon /><Box m={1}>Plage</Box>\n                            </div>\n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Station;","import TimeHelper from '../helpers/TimeHelper';\n\nexport const populationMarks = [\n    {value: 0, scaledValue: 100, label: \"100\"},\n    {value: 25, scaledValue: 1000, label: \"1k\"},\n    {value: 50, scaledValue: 5000, label: \"5k\"},\n    {value: 75, scaledValue: 10000, label: \"10k\"},\n    {value: 100, scaledValue: 25000, label: \"25k\"},\n    {value: 125, scaledValue: 50000, label: \"50k\"},\n    {value: 150, scaledValue: 100000, label: \"100k\"},\n    {value: 175, scaledValue: 200000, label: \"200k\"},\n    {value: 200, scaledValue: 3000000, label: \"3M\"}\n];\n\nexport const travelTimeMarks = [\n    {value: 0, scaledValue: 0.5, label: TimeHelper.hoursToTimeString(0.5, false)},\n    {value: 2, scaledValue: 1, label: TimeHelper.hoursToTimeString(1, false)},\n    {value: 4, scaledValue: 2, label: TimeHelper.hoursToTimeString(2, false)},\n    {value: 6, scaledValue: 3, label: TimeHelper.hoursToTimeString(3, false)},\n    {value: 8, scaledValue: 4, label: TimeHelper.hoursToTimeString(4, false)},\n    {value: 10, scaledValue: 5, label: TimeHelper.hoursToTimeString(5, false)},\n    {value: 12, scaledValue: 8, label: TimeHelper.hoursToTimeString(8, false)},\n    {value: 14, scaledValue: 10, label: TimeHelper.hoursToTimeString(10, false)},\n    {value: 16, scaledValue: 12, label: TimeHelper.hoursToTimeString(12, false)},\n    {value: 18, scaledValue: 16, label: TimeHelper.hoursToTimeString(16, false)},\n    {value: 20, scaledValue: 20, label: TimeHelper.hoursToTimeString(20, false)},\n];\n\nexport function populationSliderScale(value) {\n    return sliderScale(populationMarks, value, 25);\n}\n\nexport function travelTimeSliderScale(value) {\n    return sliderScale(travelTimeMarks, value, 2);\n}\n\nfunction sliderScale(marks, value, step) {\n    const previousMarkIndex = Math.floor(value / step);\n    const previousMark = marks[previousMarkIndex];\n    const remainder = value % step;\n    if (remainder === 0) {\n        return previousMark.scaledValue;\n    }\n    const nextMark = marks[previousMarkIndex + 1];\n    const increment = (nextMark.scaledValue - previousMark.scaledValue) / step;\n    return remainder * increment + previousMark.scaledValue;\n}\n\nexport function populationSliderText(value) {\n    if (value >= 1000000) {\n        return `${Math.trunc(value/1000000)}M`;\n    } else if (value > 1000) {\n        return `${Math.trunc(value/1000)}K`;\n    }\n    return value;\n}\n\nexport function travelTimeSliderText(value) {\n    return `${TimeHelper.hoursToTimeString(value, value < 5)}`;\n}","import React, { Component } from 'react';\nimport { Formik, Form, Field, useFormikContext } from 'formik';\nimport { Button } from '@material-ui/core';\nimport { CheckboxWithLabel } from 'formik-material-ui';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Box from '@material-ui/core/Box';\nimport {\n    populationMarks,\n    travelTimeMarks,\n    populationSliderScale,\n    travelTimeSliderScale,\n    populationSliderText,\n    travelTimeSliderText,\n} from '../helpers/SliderHelper';\nimport debounce from 'debounce';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst AutoSave = () => {\n    const formik = useFormikContext();\n\n    React.useEffect(() => {\n        if (formik.values !== formik.initialValues) {\n            formik.submitForm();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [formik.values]);\n    return null;\n}\n\nconst AVAILABLE_CITIES = [\n    {name: \"Paris\", inseeCode: process.env.REACT_APP_PARIS_INSEE_CODE},\n    {name: \"Lyon\", inseeCode: \"69123\"},\n    {name: \"Marseille\", inseeCode: \"13055\"},\n]\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            minTravelTime: 0,\n            maxTravelTime: 20,\n            travelTimeRange: [0, 20],\n            minPopulation: 0,\n            maxPopulation: 200,\n            populationRange: [0, 200],\n            fromCityInseeCode: AVAILABLE_CITIES[0].inseeCode,\n        }\n    }\n\n    onSliderChange(event, value, setFieldValue, field) {\n        // use formik's setFieldValue to update form\n        if (field === \"travelTime\") {\n            setFieldValue(\"minTravelTime\", travelTimeSliderScale(value[0]));\n            setFieldValue(\"maxTravelTime\", travelTimeSliderScale(value[1]));\n            this.setState({travelTimeRange: value});\n        } else {\n            setFieldValue(\"minPopulation\", populationSliderScale(value[0]));\n            setFieldValue(\"maxPopulation\", populationSliderScale(value[1]));\n            this.setState({populationRange: value});\n        }\n    }\n\n    // XXX feels like I shouldn't need to use the component's state for this\n    onSelectChange(event, setFieldValue) {\n        // use formik's setFieldValue to update form\n        setFieldValue(event.target.name, event.target.value);\n        this.setState({[event.target.name]: event.target.value}); // see computed property names\n    }\n\n    doSearch(values) {\n        this.props.onSearchChange(values);\n    }\n\n    render() {\n        return (\n            <div>\n                <Formik\n                    initialValues={{\n                        travelTime: this.state.travelTimeRange,\n                        population: this.state.populationRange,\n                        minTravelTime: this.state.minTravelTime,\n                        maxTravelTime: this.state.maxTravelTime,\n                        fromCityInseeCode: this.state.fromCityInseeCode,\n                    }}\n                    onSubmit={debounce((values) => {\n                        this.doSearch(values);\n                    }, 100)}\n                >\n                    {({\n                        handleSubmit,\n                        setFieldValue\n                    }) => (\n                            <Form onSubmit={handleSubmit} onChange={this.handleFormChange}>\n                                <AutoSave />\n                                <Box pb={2}>\n                                    <Typography id=\"travel-time\" gutterBottom>Départ</Typography>\n                                    <FormControl variant=\"outlined\" style={{ width: \"95%\" }}>\n                                        <Select\n                                            name=\"fromCityInseeCode\"\n                                            value={this.state.fromCityInseeCode}\n                                            onChange={(event) => this.onSelectChange(event, setFieldValue)}\n                                        >\n                                            {AVAILABLE_CITIES.map((city) => {\n                                                return (\n                                                    <MenuItem value={city.inseeCode}>{city.name}</MenuItem>\n                                                )\n                                            })}\n                                        </Select>\n                                    </FormControl>\n                                </Box>\n                                <Typography id=\"travel-time\" gutterBottom>Temps de trajet</Typography>\n                                <Box m={2}>\n                                    <Slider\n                                        value={this.state.travelTimeRange}\n                                        onChange={(event, value) => this.onSliderChange(event, value, setFieldValue, \"travelTime\")}\n                                        valueLabelDisplay=\"auto\"\n                                        valueLabelFormat={travelTimeSliderText}\n                                        min={this.state.minTravelTime}\n                                        max={this.state.maxTravelTime}\n                                        scale={(x) => travelTimeSliderScale(x)}\n                                        marks={travelTimeMarks}\n                                        style={{ width: \"95%\" }}\n                                    />\n                                </Box>\n                                <Typography id=\"population\" gutterBottom>Population</Typography>\n                                <Box m={2}>\n                                    <Slider\n                                        value={this.state.populationRange}\n                                        onChange={(event, value) => this.onSliderChange(event, value, setFieldValue, \"population\")}\n                                        valueLabelDisplay=\"auto\"\n                                        valueLabelFormat={populationSliderText}\n                                        min={this.state.minPopulation}\n                                        max={this.state.maxPopulation}\n                                        scale={(x) => populationSliderScale(x)}\n                                        marks={populationMarks}\n                                        style={{ width: \"95%\" }}\n                                    />\n                                </Box>\n                                <div style={{ display: \"flex\", marginTop: 10 }}>\n                                    <div>\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasFiber\"\n                                            Label={{ label: \"Avec la fibre\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasCountryside\"\n                                            Label={{ label: \"À la campagne\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasMountains\"\n                                            Label={{ label: \"À la montagne\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasCoastline\"\n                                            Label={{ label: \"À la mer\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasLake\"\n                                            disabled={false}\n                                            Label={{ label: \"Près d'un grand lac\" }}\n                                        /><br />\n                                    </div>\n                                    <div>\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noFiber\"\n                                            Label={{ label: \"Sans la fibre\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noCountryside\"\n                                            Label={{ label: \"En ville\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noMountains\"\n                                            Label={{ label: \"Pas à la montagne\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noCoastline\"\n                                            Label={{ label: \"Pas à la mer\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasPark\"\n                                            Label={{ label: \"Dans un parc naturel\" }}\n                                            disabled={false}\n                                        /><br />\n                                    </div>\n                                </div>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                    disabled={false}\n                                    style={{ marginTop: 10 }}\n                                >Filtrer</Button>\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        )\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport './SidePanel.css'\nimport Station from './Station.js';\nimport Search from './Search.js';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withRouter } from \"react-router-dom\";\nimport stationService from '../services/StationService';\n\nclass SidePanel extends Component {\n    constructor(props) {\n        super(props);\n        this.handleCloseStation = this.handleCloseStation.bind(this);\n        let station = null;\n        let searchActive = true;\n        if (props.match.params.destination) {\n            station = stationService.getStationBySlug(props.match.params.destination);\n            if (station) {\n                searchActive = false;\n            }\n        }\n        this.state = {\n            searchActive: searchActive,\n            station: station,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.match.params.destination && !this.props.match.params.destination) { // no destination anymore\n            this.setState({\n                searchActive: true,\n                station: null,\n            });\n        } else if (\n            (!prevProps.match.params.destination && this.props.match.params.destination) || // first destination\n            (prevProps.match.params.destination !== this.props.match.params.destination) // new destination\n        ) {\n            let station = stationService.getStationBySlug(this.props.match.params.destination);\n            this.setState({\n                searchActive: false,\n                station: station\n            });\n        }\n    }\n\n    handleCloseStation() {\n        this.props.history.push('');\n        this.setState({\n            searchActive: true\n        });\n    }\n\n    render() {\n        return (\n            <Box pl={1} className=\"SidePanel\">\n                <img alt=\"logo\" src={process.env.PUBLIC_URL + \"/logo.png\"} width=\"30%\"/>\n                <Collapse in={this.state.searchActive}>\n                    <Search onSearchChange={this.props.onSearchChange}></Search>\n                </Collapse>\n                { !this.state.searchActive &&\n                    <Box m={2}>\n                        <Box display=\"flex\" justifyContent=\"flex-end\">\n                            <IconButton onClick={this.handleCloseStation}><CloseIcon /></IconButton>\n                        </Box>\n                        <Station station={this.state.station} />\n                    </Box>\n                }\n            </Box>\n        )\n    }\n}\n\nexport default withRouter(SidePanel);\n","import './App.css';\nimport Map from './components/Map.js'\nimport SidePanel from './components/SidePanel.js'\nimport stationService from './services/StationService.js';\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport 'fontsource-roboto';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stations: [],\n      search: {\n        // follows slider helper scale\n        minTravelTime: 0,\n        maxTravelTime: 20,\n        fromCityInseeCode: process.env.REACT_APP_PARIS_INSEE_CODE,\n      }\n    };\n  }\n\n  componentDidMount() {\n    stationService.search(this.state.search).then((stations) => {\n      this.setState({stations: stations});\n    });\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  handleSearchChange(search) {\n    if (search !== this.state.search) {\n      stationService.search(search).then((stations) => {\n        this.setState({\n          search: search,\n          stations: stations\n        });\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Route path=\"/:origin?/:destination?\">\n            <SidePanel\n              onSearchChange={this.handleSearchChange}\n            />\n            <Map\n              stations={this.state.stations}\n              minTravelTime={this.state.search.minTravelTime}\n              maxTravelTime={this.state.search.maxTravelTime}\n            />\n          </Route>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}