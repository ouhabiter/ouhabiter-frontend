{"version":3,"sources":["helpers/MapHelper.js","helpers/TimeHelper.js","helpers/SliderHelper.js","helpers/SearchHelper.js","services/CityService.js","services/StationService.js","components/Map.js","components/Station.js","components/Search.js","components/SidePanel.js","components/LandingPage.js","App.js","reportWebVitals.js","index.js"],"names":["MapHelper","station","stationId","lng","lat","travelTime","min","max","start","parseFloat","step","TimeHelper","hours","withMinutes","rhours","Math","floor","minutes","rminutes","round","populationMarks","value","scaledValue","label","travelTimeMarks","hoursToTimeString","populationSliderScale","sliderScale","travelTimeSliderScale","marks","previousMarkIndex","previousMark","remainder","populationSliderValue","sliderValue","travelTimeSliderValue","forEach","mark","populationSliderText","trunc","travelTimeSliderText","setSearch","search","searchParams","URLSearchParams","window","location","searchParam","set","delete","length","history","pushState","toString","setDestination","destination","getSearch","minTravelTime","maxTravelTime","minPopulation","maxPopulation","fromCityInseeCode","process","key","undefined","CityService","cityInseeCode","axios","url","params","fields","format","geometry","then","response","data","contour","catch","error","stationService","client","algoliasearch","this","index","initIndex","stations","formerStations","inseeCode","promise","Promise","resolve","hits","browseObjects","query","filters","batch","concat","updateStations","result","cityPopulation","hasFiber","noFiber","hasMountains","noMountains","hasLake","hasCoastline","noCoastline","hasCountryside","noCountryside","hasPark","push","find","stationSlug","stationName","replace","toLowerCase","originInseeCode","destinationStationId","from","to","auth","username","journeys","itinerary","section","geojson","coordinates","Map","props","onMapLoad","bind","handleMapClick","state","colorScale","prevProps","updateColorScale","map","addSource","addLayer","forceUpdate","setStation","get","features","stationToFeature","getSource","setData","buildColorScale","paintProperty","setState","setPaintProperty","event","queryRenderedFeatures","point","layers","getSlugFromId","properties","id","getStationBySlug","onDestinationChange","getCityOutline","toCityInseeCode","cityOutline","getLayer","setLayoutProperty","getItinerary","style","height","width","accessToken","zoom","mapboxStyle","onLoad","onClick","Box","component","Paper","className","Tooltip","title","Component","withRouter","Station","m","cityName","toLocaleString","AutoSave","formik","useFormikContext","React","useEffect","values","initialValues","submitForm","AVAILABLE_CITIES","name","Search","travelTimeRange","populationRange","console","log","setFieldValue","field","target","onSearchChange","onSubmit","debounce","doSearch","handleSubmit","onChange","handleFormChange","pb","Typography","gutterBottom","FormControl","variant","Select","onSelectChange","city","MenuItem","Slider","onSliderChange","valueLabelDisplay","valueLabelFormat","scale","x","display","marginTop","CheckboxWithLabel","type","Label","disabled","Button","color","SidePanel","handleCloseStation","searchActive","pl","alt","src","Collapse","in","justifyContent","IconButton","TextTypography","withStyles","root","fontWeight","LandingPage","Grid","container","spacing","direction","alignItems","justify","minHeight","xs","size","App","handleSearchChange","handleDestinationChange","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97069fcb.chunk.js","sourcesContent":["class MapHelper {\n    static stationToFeature(station) {\n        return {\n            \"type\": \"Feature\",\n            \"id\": station.stationId,\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [station.lng, station.lat]\n            },\n            \"properties\": {\n                \"id\": station.stationId,\n                \"travelTime\": station.travelTime,\n            }\n        }\n    }\n\n    static buildColorScale(min, max) {\n        let start = parseFloat(min);\n        let step = (parseFloat(max) - start) / 5;\n        let colorScale = [\n            '#0A5502',\n            start + step,\n            '#13be00',\n            start + step * 2,\n            '#dfff00',\n            start + step * 3,\n            '#ffa51f',\n            start + step * 4,\n            '#c80000'\n        ]\n        return colorScale;\n    }\n}\n\nexport default MapHelper;\n","class TimeHelper {\n    static hoursToTimeString(hours, withMinutes=true) {\n        var rhours = Math.floor(hours);\n        var minutes = (hours - rhours) * 60;\n        var rminutes = Math.round(minutes);\n        if (rhours === 0) {\n            return rminutes + \"min\";\n        }\n        if (rminutes < 10) {\n            rminutes = \"0\" + rminutes;\n        }\n        if (withMinutes) {\n            return rhours + \"h\" + rminutes;\n        }\n        return rhours + \"h\";\n    }\n}\n\nexport default TimeHelper;","import TimeHelper from '../helpers/TimeHelper';\n\nexport const populationMarks = [\n    {value: 0, scaledValue: 100, label: \"100\"},\n    {value: 25, scaledValue: 1000, label: \"1k\"},\n    {value: 50, scaledValue: 5000, label: \"5k\"},\n    {value: 75, scaledValue: 10000, label: \"10k\"},\n    {value: 100, scaledValue: 25000, label: \"25k\"},\n    {value: 125, scaledValue: 50000, label: \"50k\"},\n    {value: 150, scaledValue: 100000, label: \"100k\"},\n    {value: 175, scaledValue: 200000, label: \"200k\"},\n    {value: 200, scaledValue: 3000000, label: \"3M\"}\n];\n\nexport const travelTimeMarks = [\n    {value: 0, scaledValue: 0.5, label: TimeHelper.hoursToTimeString(0.5, false)},\n    {value: 2, scaledValue: 1, label: TimeHelper.hoursToTimeString(1, false)},\n    {value: 4, scaledValue: 2, label: TimeHelper.hoursToTimeString(2, false)},\n    {value: 6, scaledValue: 3, label: TimeHelper.hoursToTimeString(3, false)},\n    {value: 8, scaledValue: 4, label: TimeHelper.hoursToTimeString(4, false)},\n    {value: 10, scaledValue: 5, label: TimeHelper.hoursToTimeString(5, false)},\n    {value: 12, scaledValue: 8, label: TimeHelper.hoursToTimeString(8, false)},\n    {value: 14, scaledValue: 10, label: TimeHelper.hoursToTimeString(10, false)},\n    {value: 16, scaledValue: 12, label: TimeHelper.hoursToTimeString(12, false)},\n    {value: 18, scaledValue: 16, label: TimeHelper.hoursToTimeString(16, false)},\n    {value: 20, scaledValue: 20, label: TimeHelper.hoursToTimeString(20, false)},\n];\n\nexport function populationSliderScale(value) {\n    return sliderScale(populationMarks, value, 25);\n}\n\nexport function travelTimeSliderScale(value) {\n    return sliderScale(travelTimeMarks, value, 2);\n}\n\nfunction sliderScale(marks, value, step) {\n    const previousMarkIndex = Math.floor(value / step);\n    const previousMark = marks[previousMarkIndex];\n    const remainder = value % step;\n    if (remainder === 0) {\n        return previousMark.scaledValue;\n    }\n    const nextMark = marks[previousMarkIndex + 1];\n    const increment = (nextMark.scaledValue - previousMark.scaledValue) / step;\n    return remainder * increment + previousMark.scaledValue;\n}\n\nexport function populationSliderValue(scaledValue) {\n  return sliderValue(populationMarks, scaledValue);\n}\n\nexport function travelTimeSliderValue(scaledValue) {\n  return sliderValue(travelTimeMarks, scaledValue);\n}\n\nfunction sliderValue(marks, scaledValue) {\n  let value = marks[0].value;\n  marks.forEach(mark => {\n    if (mark.scaledValue <= scaledValue) {\n      value = mark.value;\n    }\n  });\n  return value;\n}\n\nexport function populationSliderText(value) {\n    if (value >= 1000000) {\n        return `${Math.trunc(value/1000000)}M`;\n    } else if (value > 1000) {\n        return `${Math.trunc(value/1000)}K`;\n    }\n    return value;\n}\n\nexport function travelTimeSliderText(value) {\n    return `${TimeHelper.hoursToTimeString(value, value < 5)}`;\n}\n","import { travelTimeMarks, populationMarks } from './SliderHelper';\n\nexport function setSearch(search) {\n  let searchParams = new URLSearchParams(window.location.search);\n  for (const searchParam in search) {\n    if (!search[searchParam]) {\n      searchParams.delete(searchParam);\n    } else {\n      searchParams.set(searchParam, search[searchParam]);\n    }\n  }\n  if (searchParams.length > 0) {\n    window.history.pushState('', '', `?${searchParams.toString()}`);\n  }\n}\n\nexport function setDestination(destination) {\n  setSearch({destination: destination});\n}\n\nexport function getDestination() {\n  let searchParams = new URLSearchParams(window.location.search);\n  return searchParams.get('destination');\n}\n\nexport function getSearch() {\n  let search = {\n    minTravelTime: travelTimeMarks[0].scaledValue,\n    maxTravelTime: travelTimeMarks[travelTimeMarks.length-1].scaledValue,\n    minPopulation: populationMarks[0].scaledValue,\n    maxPopulation: populationMarks[populationMarks.length-1].scaledValue,\n    fromCityInseeCode: process.env.REACT_APP_PARIS_INSEE_CODE,\n  };\n  let searchParams = new URLSearchParams(window.location.search);\n  searchParams.forEach((value, key) => {\n    if (value !== undefined) {\n      search[key] = value;\n    }\n  });\n  return search;\n}\n","import axios from 'axios';\n\nclass CityService {\n    static getCityOutline(cityInseeCode) {\n        return axios({\n            url: `https://geo.api.gouv.fr/communes/${cityInseeCode}`,\n            params: {\n                fields: 'contour',\n                format: 'json',\n                geometry: 'centre',\n            }\n        }).then((response) => {\n            return response.data.contour;\n        }).catch(function (error) {\n            return null;\n        });\n    }\n}\n\nexport default CityService;","import axios from 'axios';\nimport algoliasearch from 'algoliasearch';\n\nclass StationService {\n  constructor() {\n    const client = algoliasearch('JQA10Z2OZN', 'ed6d425150c2377e707cd08de17236b7');\n    this.index = client.initIndex('stations');\n    this.stations = [];\n    this.formerStations = {};\n    this.inseeCode = null;\n  }\n\n  async updateStations(inseeCode) {\n    // save all stations to avoid calls\n    var promise = null;\n    if (inseeCode === this.inseeCode) {\n      promise = new Promise((resolve) => {resolve()});\n      return promise;\n    }\n    if (inseeCode in this.formerStations) {\n      this.stations = this.formerStations[inseeCode];\n      this.inseeCode = inseeCode;\n      promise = new Promise((resolve) => {resolve()});\n      return promise;\n    }\n    this.formerStations[this.inseeCode] = this.stations;\n    this.inseeCode = inseeCode;\n    let hits = [];\n    return this.index.browseObjects({\n      query: '', // Empty query will match all records\n      filters: `fromCityInseeCode=${inseeCode}`,\n      batch: batch => {\n        hits = hits.concat(batch);\n      }\n    }).then(() => this.stations = hits);\n  }\n\n  async search(search) {\n    return this.updateStations(search.fromCityInseeCode).then(() => {\n      let result = []\n      this.stations.forEach(station => {\n        if (\n          search &&\n          (\n            (search.minPopulation && search.minPopulation > station.cityPopulation) ||\n            (search.maxPopulation && search.maxPopulation < station.cityPopulation) ||\n            (search.minTravelTime && search.minTravelTime > station.travelTime) ||\n            (search.maxTravelTime && search.maxTravelTime < station.travelTime) ||\n            (search.hasFiber && !station.hasFiber) ||\n            (search.noFiber && station.hasFiber) ||\n            (search.hasMountains && !station.hasMountains) ||\n            (search.noMountains && station.hasMountains) ||\n            (search.hasLake && !station.hasLake) ||\n            (search.hasCoastline && !station.hasCoastline) ||\n            (search.noCoastline && station.hasCoastline) ||\n            (search.hasCountryside && !station.hasCountryside) ||\n            (search.noCountryside && station.hasCountryside) ||\n            (search.hasPark && !station.hasPark)\n          )\n        ) {\n          return;\n        }\n        result.push(station)\n      })\n      return result;\n    });\n  }\n\n  getStationById(stationId) {\n    if (!stationId) {\n      return null;\n    }\n    let result = this.stations.find(station => station.stationId === stationId);\n    return result;\n  }\n\n  getStationBySlug(stationSlug) {\n    if (!stationSlug) {\n      return null;\n    }\n    let result = this.stations.find(station => station.stationName.replace(' ', '-').toLowerCase() === stationSlug);\n    return result;\n  }\n\n  getSlugFromId(stationId) {\n    if (!stationId) {\n      return null;\n    }\n    let station = this.stations.find(station => station.stationId === stationId);\n    if (!station) {\n      return null;\n    }\n    let result = station.stationName.replace(' ', '-').toLowerCase();\n    return result;\n  }\n\n  getItinerary(originInseeCode, destinationStationId) {\n    return axios({\n      url: 'https://api.sncf.com/v1/coverage/sncf/journeys',\n      params: {\n        from: originInseeCode,\n        to: `stop_area:OCE:SA:${destinationStationId}`\n      },\n      auth: {\n        username: 'eec588d2-c133-419f-83de-8fc595fb6a4f'\n      }\n    }).then((response) => {\n      if (!response.data.journeys) {\n        return null;\n      }\n      let itinerary = {\n        'type': 'LineString',\n        'coordinates': []\n      };\n      response.data.journeys[0]['sections'].forEach((section) => {\n        if (!section.geojson) {\n          return;\n        }\n        itinerary.coordinates.push(...section.geojson.coordinates);\n      });\n      return itinerary;\n    });\n  }\n}\n\nlet stationService = new StationService(); // singleton to get stations once\nexport default stationService;\n","import { Box, Paper, Tooltip } from '@material-ui/core';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport React, { Component } from 'react';\nimport MapboxMap from 'react-mapbox-wrapper';\nimport MapHelper from '../helpers/MapHelper';\nimport { setDestination } from '../helpers/SearchHelper';\nimport TimeHelper from '../helpers/TimeHelper';\nimport CityService from '../services/CityService';\nimport { withRouter } from \"react-router-dom\";\nimport './Map.css';\nimport stationService from '../services/StationService';\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.onMapLoad = this.onMapLoad.bind(this);\n        this.handleMapClick = this.handleMapClick.bind(this);\n        this.state = {\n            colorScale: null,\n            destination: null,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props){\n            this.updateStations();\n            this.updateColorScale();\n        }\n    }\n\n    onMapLoad(map) {\n        // layer order is important, current station must be last to be above all the other layers\n        map.addSource('stations', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': []\n            }\n        });\n        map.addLayer({\n            'id': 'stations',\n            'type': 'circle',\n            'source': 'stations',\n            'paint': {\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#000',\n                'circle-radius': {\n                    'base': 3,\n                    'stops': [\n                        [8, 4],\n                        [8, 8],\n                        [22, 180]\n                    ]\n                },\n            }\n        });\n        map.addSource('itinerary', {\n            'type': 'geojson',\n            'data': {\n                'type': 'LineString',\n                'coordinates': []\n            }\n        });\n        map.addLayer({\n            'id': 'itinerary',\n            'type': 'line',\n            'source': 'itinerary',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#33302E',\n                'line-width': 3\n            }\n        });\n        map.addSource('city-outline', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Polygon',\n                'coordinates': []\n            }\n        });\n        map.addLayer({\n            'id': 'city-outline',\n            'type': 'line',\n            'source': 'city-outline',\n            'paint': {\n                'line-color': '#000000',\n                'line-width': 1,\n            }\n        });\n        this.map = map;\n        this.updateStations();\n        this.updateColorScale();\n        this.forceUpdate();\n        let searchParams = new URLSearchParams(this.props.location.search);\n        this.setStation(searchParams.get('destination'));\n    }\n\n    updateStations() {\n        if (!this.props.stations) {\n            return;\n        }\n        let features = [];\n        this.props.stations.forEach(station => {\n            features.push(MapHelper.stationToFeature(station))\n        });\n        if (this.map) {\n            this.map.getSource('stations').setData({\n                'type': 'FeatureCollection',\n                'features': features\n            });\n        }\n    }\n\n    updateColorScale() {\n        let colorScale = MapHelper.buildColorScale(this.props.minTravelTime, this.props.maxTravelTime);\n        let paintProperty = [\n            'step',\n            ['get', 'travelTime'],\n            ...colorScale\n        ];\n        this.setState({\n            colorScale: colorScale,\n        });\n        if (this.map) {\n            this.map.setPaintProperty('stations', 'circle-color', paintProperty);\n        }\n    }\n\n    handleMapClick(event) {\n        let features = this.map.queryRenderedFeatures(event.point, {layers: ['stations']});\n        let stationSlug = null;\n        if (features.length > 0) {\n            stationSlug = stationService.getSlugFromId(features[0].properties.id);\n        }\n        this.setStation(stationSlug);\n    }\n\n    setStation(stationSlug) {\n        let station = stationService.getStationBySlug(stationSlug);\n        if (!station) {\n            setDestination(null);\n            this.props.onDestinationChange(null);\n            return;\n        }\n        setDestination(stationSlug);\n        this.props.onDestinationChange(stationSlug);\n        CityService.getCityOutline(station.toCityInseeCode).then((cityOutline) => {\n            if (cityOutline) {\n                this.map.getSource('city-outline').setData(cityOutline);\n            } else {\n                this.map.getLayer('city-outline').setLayoutProperty('visibility', 'none');\n            }\n        });\n        stationService.getItinerary(`admin:fr:${this.props.fromCityInseeCode}`, station.stationId).then((itinerary) => {\n            if (itinerary) {\n                this.map.getSource('itinerary').setData(itinerary);\n            } else {\n                this.map.getLayer('itinerary').setLayoutProperty('visibility', 'none');\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div style={{ height: \"100vh\", width: \"100%\" }}>\n                <MapboxMap\n                    accessToken=\"pk.eyJ1IjoibWVpbGxldXJzYWdlbnRzIiwiYSI6ImNqMWV5YnRpMDAwMHkyeXRnd3JkdXRiaDEifQ.emcFsn3Ox6WcKmOHhbTOPQ\"\n                    zoom=\"5\"\n                    mapboxStyle=\"mapbox://styles/meilleursagents/ckhf5i46501mv1apg8er3v1b1\"\n                    coordinates={{ lat: 46.227638, lng: -0.8930568 }}\n                    onLoad={this.onMapLoad}\n                    onClick={this.handleMapClick}\n                >\n                </MapboxMap>\n                { this.state.colorScale &&\n                    <Box component={Paper} className=\"ColorScaleContainer\">\n                        <TimerIcon />\n                        <div className=\"ColorScaleStart\">{\"- de \" + TimeHelper.hoursToTimeString(this.state.colorScale[1])}</div>\n                        <Tooltip title={\"moins de \" + TimeHelper.hoursToTimeString(this.state.colorScale[1])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[0] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"de \" + TimeHelper.hoursToTimeString(this.state.colorScale[1]) + \" à \" + TimeHelper.hoursToTimeString(this.state.colorScale[3])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[2] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"de \" + TimeHelper.hoursToTimeString(this.state.colorScale[3]) + \" à \" + TimeHelper.hoursToTimeString(this.state.colorScale[5])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[4] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"de \" + TimeHelper.hoursToTimeString(this.state.colorScale[5]) + \" à \" + TimeHelper.hoursToTimeString(this.state.colorScale[7])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[6] }}></div>\n                        </Tooltip>\n                        <Tooltip title={\"plus de \" + TimeHelper.hoursToTimeString(this.state.colorScale[7])}>\n                            <div className=\"ColorScaleColor\" style={{ \"background-color\": this.state.colorScale[8] }}></div>\n                        </Tooltip>\n                        <div className=\"ColorScaleEnd\">{\"+ de \" + TimeHelper.hoursToTimeString(this.state.colorScale[7])}</div>\n                    </Box>\n                }\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Map);\n","import React, { Component } from 'react';\nimport TimeHelper from '../helpers/TimeHelper';\nimport TrainIcon from '@material-ui/icons/Train';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport GroupIcon from '@material-ui/icons/Group';\nimport Box from '@material-ui/core/Box';\nimport PowerIcon from '@material-ui/icons/Power';\nimport NatureIcon from '@material-ui/icons/Nature';\nimport FilterHdrIcon from '@material-ui/icons/FilterHdr';\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\nimport './Station.css';\n\nclass Station extends Component {\n    render() {\n        return (\n            <div>\n                { this.props.station &&\n                    <div>\n                        <div className=\"StationInformation\">\n                            <TrainIcon /><Box m={1}>{this.props.station.stationName}</Box>\n                        </div>\n                        <div className=\"StationInformation\">\n                            <LocationCityIcon /><Box m={1}>{this.props.station.cityName}</Box>\n                        </div>\n                        <div className=\"StationInformation\">\n                            <GroupIcon /><Box m={1}>{this.props.station.cityPopulation.toLocaleString()}</Box>\n                        </div>\n                        <div className=\"StationInformation\">\n                            <TimerIcon /><Box m={1}>{TimeHelper.hoursToTimeString(this.props.station.travelTime)}</Box>\n                        </div>\n                        {this.props.station.hasFiber &&\n                            <div className=\"StationInformation\">\n                                <PowerIcon /><Box m={1}>Fibre</Box>\n                            </div>\n                        }\n                        {this.props.station.hasPark &&\n                            <div className=\"StationInformation\">\n                                <NatureIcon /><Box m={1}>Parc naturel</Box>\n                            </div>\n                        }\n                        {this.props.station.hasMountains &&\n                            <div className=\"StationInformation\">\n                                <FilterHdrIcon /><Box m={1}>Montagne</Box>\n                            </div>\n                        }\n                        {this.props.station.hasCoastline &&\n                            <div className=\"StationInformation\">\n                                <BeachAccessIcon /><Box m={1}>Plage</Box>\n                            </div>\n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Station;","import React, { Component } from 'react';\nimport { Formik, Form, Field, useFormikContext } from 'formik';\nimport { Button } from '@material-ui/core';\nimport { CheckboxWithLabel } from 'formik-material-ui';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Box from '@material-ui/core/Box';\nimport {\n    populationMarks,\n    travelTimeMarks,\n    populationSliderScale,\n    travelTimeSliderScale,\n    populationSliderText,\n    travelTimeSliderText,\n    populationSliderValue,\n    travelTimeSliderValue,\n} from '../helpers/SliderHelper';\nimport debounce from 'debounce';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport { setSearch, getSearch } from '../helpers/SearchHelper';\n\nconst AutoSave = () => {\n    const formik = useFormikContext();\n\n    React.useEffect(() => {\n        if (formik.values !== formik.initialValues) {\n            formik.submitForm();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [formik.values]);\n    return null;\n}\n\nconst AVAILABLE_CITIES = [\n    {name: \"Paris\", inseeCode: process.env.REACT_APP_PARIS_INSEE_CODE},\n    {name: \"Lyon\", inseeCode: \"69123\"},\n    {name: \"Marseille\", inseeCode: \"13055\"},\n]\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        let search = getSearch();\n        search.travelTimeRange = [\n          travelTimeSliderValue(search.minTravelTime),\n          travelTimeSliderValue(search.maxTravelTime)\n        ];\n        search.populationRange = [\n          populationSliderValue(search.minPopulation),\n          populationSliderValue(search.maxPopulation)\n        ];\n        console.log(search);\n        this.state = search;\n    }\n\n    onSliderChange(event, value, setFieldValue, field) {\n        // use formik's setFieldValue to update form\n        if (field === \"travelTime\") {\n            setFieldValue(\"minTravelTime\", travelTimeSliderScale(value[0]));\n            setFieldValue(\"maxTravelTime\", travelTimeSliderScale(value[1]));\n            this.setState({travelTimeRange: value});\n        } else {\n            setFieldValue(\"minPopulation\", populationSliderScale(value[0]));\n            setFieldValue(\"maxPopulation\", populationSliderScale(value[1]));\n            this.setState({populationRange: value});\n        }\n    }\n\n    // XXX feels like I shouldn't need to use the component's state for this\n    onSelectChange(event, setFieldValue) {\n        // use formik's setFieldValue to update form\n        setFieldValue(event.target.name, event.target.value);\n        this.setState({[event.target.name]: event.target.value}); // see computed property names\n    }\n\n    doSearch(values) {\n        this.props.onSearchChange(values);\n        setSearch(values);\n    }\n\n    render() {\n        return (\n            <div>\n                <Formik\n                    initialValues={this.state}\n                    onSubmit={debounce((values) => {\n                        this.doSearch(values);\n                    }, 100)}\n                >\n                    {({\n                        handleSubmit,\n                        setFieldValue\n                    }) => (\n                            <Form onSubmit={handleSubmit} onChange={this.handleFormChange}>\n                                <AutoSave />\n                                <Box pb={2}>\n                                    <Typography id=\"travel-time\" gutterBottom>Départ</Typography>\n                                    <FormControl variant=\"outlined\" style={{ width: \"95%\" }}>\n                                        <Select\n                                            name=\"fromCityInseeCode\"\n                                            value={this.state.fromCityInseeCode}\n                                            onChange={(event) => this.onSelectChange(event, setFieldValue)}\n                                        >\n                                            {AVAILABLE_CITIES.map((city) => {\n                                                return (\n                                                    <MenuItem value={city.inseeCode}>{city.name}</MenuItem>\n                                                )\n                                            })}\n                                        </Select>\n                                    </FormControl>\n                                </Box>\n                                <Typography id=\"travel-time\" gutterBottom>Temps de trajet</Typography>\n                                <Box m={2}>\n                                    <Slider\n                                        value={this.state.travelTimeRange}\n                                        onChange={(event, value) => this.onSliderChange(event, value, setFieldValue, \"travelTime\")}\n                                        valueLabelDisplay=\"auto\"\n                                        valueLabelFormat={travelTimeSliderText}\n                                        min={travelTimeMarks[0].value}\n                                        max={travelTimeMarks[travelTimeMarks.length-1].value}\n                                        scale={(x) => travelTimeSliderScale(x)}\n                                        marks={travelTimeMarks}\n                                        style={{ width: \"95%\" }}\n                                    />\n                                </Box>\n                                <Typography id=\"population\" gutterBottom>Population</Typography>\n                                <Box m={2}>\n                                    <Slider\n                                        value={this.state.populationRange}\n                                        onChange={(event, value) => this.onSliderChange(event, value, setFieldValue, \"population\")}\n                                        valueLabelDisplay=\"auto\"\n                                        valueLabelFormat={populationSliderText}\n                                        min={populationMarks[0].value}\n                                        max={populationMarks[populationMarks.length-1].value}\n                                        scale={(x) => populationSliderScale(x)}\n                                        marks={populationMarks}\n                                        style={{ width: \"95%\" }}\n                                    />\n                                </Box>\n                                <div style={{ display: \"flex\", marginTop: 10 }}>\n                                    <div>\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasFiber\"\n                                            Label={{ label: \"Avec la fibre\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasCountryside\"\n                                            Label={{ label: \"À la campagne\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasMountains\"\n                                            Label={{ label: \"À la montagne\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasCoastline\"\n                                            Label={{ label: \"À la mer\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasLake\"\n                                            disabled={false}\n                                            Label={{ label: \"Près d'un grand lac\" }}\n                                        /><br />\n                                    </div>\n                                    <div>\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noFiber\"\n                                            Label={{ label: \"Sans la fibre\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noCountryside\"\n                                            Label={{ label: \"En ville\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noMountains\"\n                                            Label={{ label: \"Pas à la montagne\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"noCoastline\"\n                                            Label={{ label: \"Pas à la mer\" }}\n                                            disabled={false}\n                                        /><br />\n                                        <Field\n                                            component={CheckboxWithLabel}\n                                            type=\"checkbox\"\n                                            name=\"hasPark\"\n                                            Label={{ label: \"Dans un parc naturel\" }}\n                                            disabled={false}\n                                        /><br />\n                                    </div>\n                                </div>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                    disabled={false}\n                                    style={{ marginTop: 10 }}\n                                >Filtrer</Button>\n                            </Form>\n                        )}\n                </Formik>\n            </div>\n        )\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport './SidePanel.css'\nimport Station from './Station.js';\nimport Search from './Search.js';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withRouter } from \"react-router-dom\";\nimport stationService from '../services/StationService';\nimport { setDestination } from '../helpers/SearchHelper';\n\nclass SidePanel extends Component {\n    constructor(props) {\n        super(props);\n        this.handleCloseStation = this.handleCloseStation.bind(this);\n        this.state = {\n            searchActive: true,\n            station: null,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.destination && !this.props.destination) { // no destination anymore\n            this.setState({\n                searchActive: true,\n                station: null,\n            });\n        } else if (\n            (!prevProps.destination && this.props.destination) || // first destination\n            (prevProps.destination !== this.props.destination) // new destination\n        ) {\n            let station = stationService.getStationBySlug(this.props.destination);\n            this.setState({\n                searchActive: false,\n                station: station\n            });\n        }\n    }\n\n    handleCloseStation() {\n        setDestination(null);\n        this.setState({\n            searchActive: true\n        });\n    }\n\n    render() {\n        return (\n            <Box pl={1} className=\"SidePanel\">\n                <img alt=\"logo\" src={process.env.PUBLIC_URL + \"/logo.png\"} width=\"30%\"/>\n                <Collapse in={this.state.searchActive}>\n                    <Search onSearchChange={this.props.onSearchChange}></Search>\n                </Collapse>\n                { !this.state.searchActive &&\n                    <Box m={2}>\n                        <Box display=\"flex\" justifyContent=\"flex-end\">\n                            <IconButton onClick={this.handleCloseStation}><CloseIcon /></IconButton>\n                        </Box>\n                        <Station station={this.state.station} />\n                    </Box>\n                }\n            </Box>\n        )\n    }\n}\n\nexport default withRouter(SidePanel);\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport { Link } from \"react-router-dom\";\n\nconst TextTypography = withStyles({\n  root: {\n    color: \"#FFFFFF\",\n    fontWeight: \"bold\"\n  }\n})(Typography);\n\nclass LandingPage extends Component {\n  render() {\n    return (\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tspacing={0}\n\t\t\t\tdirection=\"column\"\n\t\t\t\talignItems=\"center\"\n\t\t\t\tjustify=\"center\"\n\t\t\t\tstyle={{ \n          minHeight: '100vh', \n          'background-image': `linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('img/marseille.jpg')` \n        }}\n\t\t\t>\n        <Grid\n          container\n          spacing={0}\n          direction=\"column\"\n          alignItems=\"center\"\n          justify=\"center\"\n          xs={3}\n        >\n          <TextTypography\n            variant=\"h1\"\n            component=\"h1\"\n            gutterBottom\n          >\n            où habiter\n          </TextTypography>\n          <Link to=\"/app\">\n            <Button variant=\"contained\" color=\"primary\" size=\"large\">\n              Trouver ma ville\n            </Button>\n          </Link>\n\t\t\t\t</Grid>   \n\t\t\t</Grid> \n    )\n  }\n}\n\nexport default LandingPage;\n","import './App.css';\nimport Map from './components/Map.js'\nimport SidePanel from './components/SidePanel.js'\nimport stationService from './services/StationService.js';\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport 'fontsource-roboto';\nimport { getDestination, getSearch } from './helpers/SearchHelper';\nimport LandingPage from './components/LandingPage';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      destination: null,\n      stations: [],\n      search: getSearch(),\n    };\n  }\n\n  componentDidMount() {\n    stationService.search(this.state.search).then((stations) => {\n      this.setState({\n        stations: stations,\n        destination: getDestination(),\n      });\n    });\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleDestinationChange = this.handleDestinationChange.bind(this);\n  }\n\n  handleSearchChange(search) {\n    if (search !== this.state.search) {\n      stationService.search(search).then((stations) => {\n        this.setState({\n          search: search,\n          stations: stations\n        });\n      });\n    }\n  }\n\n  handleDestinationChange(destination) {\n    if (destination !== this.state.destination) {\n      this.setState({\n        destination: destination,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <Route exact path=\"/\">\n            <LandingPage />\n          </Route>\n          <Route path=\"/app\">\n            <SidePanel\n              onSearchChange={this.handleSearchChange}\n              destination={this.state.destination}\n            />\n            <Map\n              stations={this.state.stations}\n              minTravelTime={this.state.search.minTravelTime}\n              maxTravelTime={this.state.search.maxTravelTime}\n              fromCityInseeCode={this.state.search.fromCityInseeCode}\n              onDestinationChange={this.handleDestinationChange}\n            />\n          </Route>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}